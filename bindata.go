// Code generated by go-bindata. DO NOT EDIT.
// sources:
// frontend/app.js
// frontend/index.html

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataFrontendAppjs = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4b\x6f\x1b\x37\x10\xbe\xef\xaf\x98\x83\x00\x72\x53\x79\xd5\xa0" +
	"\x39\x49\x55\xd0\x22\x51\x6c\x03\x7e\x14\xb2\x7c\x33\xea\x50\xdc\xd1\x92\x0e\x45\x2e\x48\x2a\x52\x90\xea\xbf\x17" +
	"\xe4\x3e\xb4\x2b\x39\x4a\x51\x9d\x28\x72\xe6\x9b\xd7\x37\x33\xab\xd0\xc3\x4a\x2a\x7c\x9c\xdf\xc0\x14\xf4\x46\xa9" +
	"\x49\xc2\x8d\x76\x1e\x6e\x1f\x2e\x9f\xef\xee\x17\xcf\x9f\xee\x1f\xef\x3e\xc2\x14\xc8\x27\xa9\x10\xb4\xf1\xb0\x32" +
	"\x1b\x9d\x93\x63\xb9\xbf\x66\xf3\xdb\xeb\xc5\x62\x16\x65\xef\x8c\x07\xa6\x94\xd9\x62\x0e\xde\x00\xe3\x1c\x9d\x8b" +
	"\x86\x7a\x7a\x97\xb3\xbb\xd9\xfc\xfa\xc3\xf3\x6c\x3e\x0f\x5a\x0f\x66\x8d\x5e\x48\x5d\xc0\x16\xb5\x87\xad\x35\xba" +
	"\x20\x93\x24\x19\xbd\x81\x42\x99\x25\x53\x30\x18\xaf\x98\x72\x08\x6f\x46\x49\xc2\x15\x73\x0e\x1e\x04\xb3\x08\xdf" +
	"\x13\x00\xa9\xa5\xa7\x69\x3c\x02\x0c\xe8\x56\xea\xdc\x6c\xd3\x6c\x29\x75\x4e\x89\x60\x4e\x70\xc1\x74\x81\x64\x08" +
	"\x14\x53\x98\xbe\xaf\x25\x01\xbc\x90\x2e\x0b\x02\x37\x86\xe5\x34\x9d\xc4\xeb\x7d\x3a\x49\xe2\x21\x64\x88\x95\xe5" +
	"\x42\x7a\x85\x30\x85\xcf\x95\xc1\x3f\x60\xf0\xbd\xb2\x90\x29\xc3\x99\x97\x46\x67\xc2\x38\xbf\xff\x3c\xa9\xed\x13" +
	"\x1f\x34\x86\x19\x2b\xcb\x78\x22\x69\xe6\x71\xe7\x69\x83\xd5\xe0\xbf\x62\x7d\x1f\x5e\x70\xbd\xc4\x3c\xe4\xfc\x5a" +
	"\xaf\x0c\x0d\xa9\x0b\x29\x22\x4d\x80\x72\x05\xf5\xe5\xb4\x7b\xdd\xe2\xe9\x5c\xe1\xcc\x5a\x63\x6f\xd1\x39\x56\x20" +
	"\xed\xd5\xb3\x09\xb2\x72\xe1\x40\x80\x70\xaa\x03\xc8\xd8\x0b\xdb\x45\x13\xc3\x16\x3b\x94\xc7\xe4\x63\x20\x57\xb3" +
	"\x3f\x3f\x92\x61\x7d\xeb\x36\xb1\xbc\x63\xa0\x39\xf3\x6c\x08\xce\x33\xbf\x71\x43\xd8\x09\xdb\xcb\x73\xdf\xb7\x10" +
	"\xde\x2b\x0a\x93\x5a\x78\xdf\xa0\x63\x08\x62\x0c\x74\x27\x6c\x23\x79\x06\x35\x08\xf7\x44\x8f\xf0\xf6\x87\x04\x9f" +
	"\xf7\xa3\xc6\x0f\xd5\xf7\xdf\xca\x90\xfb\x9d\xb0\x59\x81\x7e\x8e\xae\x34\xda\xe1\x15\xb2\x1c\x2d\x25\x1f\x8c\xf6" +
	"\xa8\xfd\xc5\xe2\x5b\x89\xa4\x29\xea\x80\x92\x8c\x1b\xed\x99\xd4\x68\x49\x9a\x09\x99\x63\xc3\xac\xf0\x16\xd2\xaa" +
	"\xd9\xba\x25\x45\x5d\x81\xcc\x6d\x96\xce\x5b\xa9\x8b\xf6\x46\x31\xe7\xaf\x75\x8e\xbb\xfb\x15\x25\x23\x92\xc2\x2f" +
	"\xf0\x36\x6d\xcc\x04\x12\x04\xef\xb2\x35\xf3\x5c\xd0\xd1\xdf\x72\xcd\x0a\x7c\x1a\x8d\xd2\x03\x1f\x1a\x73\x4a\xea" +
	"\x2f\x17\xce\x72\x92\x66\xcc\x7b\x4b\x49\x38\x0f\x9b\xda\xb7\x79\x0a\xe2\x4e\x98\xed\x45\x84\x22\x69\xfc\x43\xdb" +
	"\x67\x8b\x7e\x63\x75\x8f\x3d\x27\x4e\x7c\x95\x39\x9a\xbe\x13\x21\x8d\xce\x72\x98\x06\xfc\xdf\x9d\xd9\x58\x8e\xef" +
	"\x49\x8b\xea\x2c\x3f\xeb\x54\x7c\x2f\x4b\xd4\xf9\xc2\xd0\x01\x25\xd1\x02\x49\x4f\x9d\xae\x1f\xfe\x87\xd3\x34\xd4" +
	"\xe1\x69\xf4\x0f\x2b\x4b\x25\xab\x86\x7e\x1a\xbd\xb0\xaf\xcc\x71\x2b\x4b\x9f\xf6\x52\x7a\xe8\x8d\xc7\xf9\xcd\xb0" +
	"\x43\xc5\xc0\xa3\x40\x84\x31\x90\x80\xd7\xb6\x48\xa7\x75\x2e\x67\x8b\xce\x75\xbf\x77\x8e\x88\x1d\x03\xe3\x26\x6f" +
	"\x69\x12\x65\x26\xfd\xf7\x2a\xf0\x68\xed\x38\xee\xf0\x13\xea\xc5\x65\x61\x34\x5e\xc9\x42\x28\x59\x08\x1f\xd8\xd5" +
	"\x11\xd9\x1f\x9c\xf9\x79\xab\xfd\xc7\x66\xeb\xa0\xee\xcf\x55\xa1\xc7\x4d\x61\x71\xd5\x92\x33\xfe\x39\x26\x42\x1b" +
	"\x6d\x81\x1a\xad\xe4\xbd\x80\xbb\x3d\x7d\xe2\x58\xa7\x9b\xd7\xd5\x3c\x8c\xc3\xb4\x82\x75\x5b\xe9\xb9\x88\x61\x67" +
	"\x7d\x79\x00\xce\x1c\xc2\xbb\x5f\xdf\x8d\x3b\x85\x6c\xf4\x7b\x13\xf5\x10\xfa\xd2\x22\xfb\x32\xe9\xeb\xff\x76\x4e" +
	"\xbf\xdd\x9c\x3f\xc0\xc8\x71\xc5\x36\xca\xff\x08\xa2\xb3\x44\x5f\x05\xd8\xf7\xf6\xcc\xc9\x5e\xa8\xc1\x5e\xcd\xe1" +
	"\xb1\x4c\xbb\x5c\x49\x16\xb9\xd2\xf0\xb2\x8b\xf1\xf3\xe1\x17\x4b\xd8\xe8\x9f\x14\xb0\x59\x84\x9d\x92\xd5\xcb\xef" +
	"\x64\xdf\x32\x27\x3a\x13\xf3\x6d\x6d\x22\x06\x7a\xba\x3d\x6b\x1b\xfb\x24\x19\xd0\xd5\x46\xf3\x00\x51\x5b\x89\xd3" +
	"\x29\xae\xf5\x29\x68\xdc\x56\xdf\x14\x95\x53\xf1\x3a\xab\x3e\x2d\x26\x49\x20\xf3\xbf\x01\x00\x00\xff\xff\xf5\xea" +
	"\xef\x38\x32\x09\x00\x00")

func bindataFrontendAppjsBytes() ([]byte, error) {
	return bindataRead(
		_bindataFrontendAppjs,
		"frontend/app.js",
	)
}



func bindataFrontendAppjs() (*asset, error) {
	bytes, err := bindataFrontendAppjsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "frontend/app.js",
		size: 2354,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindataFrontendIndexhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x57\x5d\x57\xe3\x36\x13\xbe\x66\x7f\x85\xea\x5e\xb2\xb2\xf2\x45\x08" +
	"\xd4\xce\x39\x84\x2c\x05\xb2\x21\xe5\x73\x59\xee\x14\x6b\x6c\x2b\x91\x25\x47\x92\x63\xc2\x9e\xf7\xbf\xbf\xc7\x4e" +
	"\x9c\x84\xb6\xd0\xd0\xb3\xe5\xc6\x8c\x46\x33\x7a\x9e\x99\x91\x66\xe2\xfd\xc2\x54\x60\x17\x29\xa0\xd8\x26\xa2\xfb" +
	"\xc9\x2b\x3e\x48\x50\x19\xf9\x0e\x48\xa7\xfb\x09\x21\x2f\x06\xca\x8a\x7f\x10\xf2\x7e\xc1\x18\xdd\xc0\x2c\xe3\x1a" +
	"\x18\x4a\xc0\x52\x64\x69\x64\x10\xc6\x2b\x7d\xb9\x14\xc4\x54\x1b\xb0\xbe\x93\xd9\x10\x77\x9c\x6d\x55\x6c\x6d\x8a" +
	"\x0b\xfb\xb9\xef\x3c\xe2\xfb\x13\x7c\xaa\x92\x94\x5a\x3e\x16\xe0\xa0\x40\x49\x0b\xd2\xfa\xce\xc5\x17\x1f\x58\x04" +
	"\xaf\x2c\x25\x4d\xc0\x77\xe6\x1c\xf2\x54\x69\xbb\xb5\x39\xe7\xcc\xc6\x3e\x83\x39\x0f\x00\x97\xc2\x67\xc4\x25\xb7" +
	"\x9c\x0a\x6c\x02\x2a\xc0\xaf\x7f\x46\x26\xd6\x5c\x4e\xb1\x55\x38\xe4\xd6\x97\xca\xe9\x7e\xda\x10\xea\x29\x65\x8d" +
	"\xd5\x34\x45\xa7\xb7\xb7\x1b\x2e\x82\xcb\x29\xd2\x20\x7c\xc7\xd8\x85\x00\x13\x03\x58\x07\xc5\x1a\x42\xdf\x29\x78" +
	"\x98\x63\x42\x02\x26\x27\xc6\x0d\x84\xca\x58\x28\xa8\x06\x37\x50\x09\xa1\x13\xfa\x4c\x04\x1f\x1b\x62\x73\x6e\x2d" +
	"\x68\x3c\xae\x4e\x20\x2d\xb7\xe6\xd6\x48\x60\x0c\x59\xaf\xb9\x09\x97\x6e\x60\x8c\x53\x1e\xbb\xfc\xe3\xd2\x42\xa4" +
	"\xb9\x5d\xf8\x8e\x89\x69\xe3\xa0\x8d\xbf\x9e\x74\x8e\x5e\xf6\xa7\x47\xe1\x24\x1a\x0e\xae\xc9\x74\xd6\x1a\x8d\x1a" +
	"\x43\x1d\x76\x1e\x84\xfd\x9e\x08\xf2\xf0\xe5\x76\xff\x26\xaa\x85\x71\xa3\xe6\x3b\x28\xd0\xca\x18\xa5\x79\xc4\xa5" +
	"\xef\x50\xa9\xe4\x22\x51\x99\x71\x10\xf9\x79\xdc\x4a\xfc\x39\xb5\x41\xbc\x22\xc5\xa8\x9e\x8a\xc5\x47\x79\x8d\xe3" +
	"\x7e\x8b\xf4\xd9\xe9\x49\x7a\x75\xf2\x5d\x8c\xd2\xf9\xc0\x98\x7b\xda\x88\xfb\xb5\x7e\xd6\x79\xd6\xd1\x68\x6e\xbf" +
	"\xb7\xf2\xc6\x81\x89\x87\xef\xf3\xda\x9d\x58\x66\xc0\x0d\x95\xb4\x34\x07\xa3\x92\x25\x2f\x0d\x02\xa8\x01\x43\xe6" +
	"\x07\x6e\xcd\xad\x2f\x53\x44\x85\x78\x9f\x40\xb3\xd3\xc2\xfb\xac\xf6\x47\xa7\x29\x8f\xa6\xf4\x7a\x78\x9a\x4f\x3a" +
	"\x67\xad\x9b\xcb\x5e\xbb\x6d\x5f\x2e\xf2\xd1\x20\xd1\x6c\xdc\x6a\xef\xa7\x4a\xf7\xc9\x68\xae\x2f\xf7\x9b\x87\xdf" +
	"\x66\x17\xc3\xc3\x7b\xd5\xb3\xf9\xf9\xa8\x7d\x25\xa2\x37\x49\xfd\xbc\x54\xc5\x3c\x8a\x05\x8f\x62\xeb\x4e\x0c\x39" +
	"\x72\xeb\x0d\xb7\x46\x96\xce\x08\x95\x4c\x2b\xce\x8c\xcd\x18\x57\xbb\x65\x4c\x7f\x79\x90\x0b\x18\x86\xd3\xc1\x4b" +
	"\xd2\xcb\x55\xc0\x00\xf8\xec\xf7\x51\x56\x1f\x12\x6b\xef\xcf\x7b\x87\x83\x5a\x02\x83\x8b\x7c\x36\xcf\x77\xc9\x98" +
	"\xe5\x56\x40\xf7\x36\xa6\x1a\x3c\xb2\x14\x56\x9a\x12\x62\x77\x85\x25\xae\xa3\x1f\xc8\xc2\xb3\xc5\x54\xf0\x48\x1e" +
	"\xa3\x00\xa4\x05\xfd\x1b\x2a\x32\x89\x0d\x7f\x81\x63\x74\x78\x90\x3e\xff\x86\xfe\x57\x59\x34\xfe\xd9\xa2\xd1\xda" +
	"\xb6\x48\x35\xa0\x40\x31\x40\x3f\x50\xa0\x84\xd2\xc7\xe8\x57\xe8\x34\xa1\x13\x6c\xb6\xb8\xc5\xbb\x43\xb9\x04\x8d" +
	"\x7e\xa0\x84\xea\x88\x4b\x6c\x55\x7a\x8c\x9a\xb5\x6d\x4f\xae\x89\x55\x8e\x23\x90\xa0\x79\xf0\x79\x25\xf2\x84\x46" +
	"\x50\x09\x73\xce\x40\x55\x02\x68\xad\x0a\x87\x8c\x9b\x54\xd0\xc5\x31\x92\x4a\x42\xe5\xcd\x23\xeb\x40\x78\xa4\x7a" +
	"\x8b\xbd\xb1\x62\x8b\xee\xa7\xbd\x3d\x4f\xd2\x39\x0a\x04\x35\xc6\x77\x24\x9d\x8f\xa9\x46\xcb\x0f\x86\xe7\x94\x4a" +
	"\x86\x45\x54\x2d\x14\x17\x14\x8d\x23\x9c\x6a\x9e\x50\xbd\x70\xaa\xd0\x7a\xf4\xb5\x03\x3c\xd6\x54\xb2\xaa\xc6\x7e" +
	"\x75\xba\x1e\xaf\x36\x84\xd4\xa0\x90\x62\x53\x64\x0b\x53\x61\xb1\x99\x65\x54\x83\xd3\xf5\x08\xef\xae\xab\xc6\x33" +
	"\x29\x95\x95\x09\x4d\xd3\x32\xab\x4e\x95\xe3\x42\xd9\xf5\x08\x2d\xd1\x13\x49\xe7\x55\xbe\x19\x5f\x33\xd9\x44\xb9" +
	"\x8c\x8f\x50\x94\x71\x19\x6d\x10\xc7\xf5\xad\xd3\xfe\x82\x2e\xe5\xb2\x30\x0d\x29\x4e\x33\x61\xc0\x41\x54\x73\x8a" +
	"\x63\xce\x18\x48\xdf\xb1\x3a\x7b\x0d\xd8\x23\x95\x3b\x8f\x30\xbe\x03\x9c\x55\x5e\x5f\xc3\xd9\xdb\xdb\xdb\xfb\x0b" +
	"\x94\xf2\x4a\x62\xa6\x72\x59\x50\x28\x22\xf6\xc6\xc9\x85\x93\x46\xd7\xa3\xeb\xa0\xaf\x1d\x71\x01\xc5\x13\x80\x0b" +
	"\x05\x2a\xa4\xa2\x13\x3a\xdd\x4c\x96\x51\x65\x45\x20\x3d\x12\x37\x3e\x44\xa0\xac\xc4\xe5\xdd\x58\x5e\x8a\xed\x5a" +
	"\x78\x17\x81\xb3\x1d\xf7\x24\x42\x46\x07\xbe\xb3\xde\xca\x93\x08\x87\x22\xe3\x0c\xad\x8d\x8c\xde\x8a\x53\x91\xf4" +
	"\x0f\xc0\x2c\xef\xc8\xc6\x7a\x6b\x23\x24\x63\x60\x58\x83\x49\x95\x34\x7c\x0e\xe8\xcf\x0b\xb8\xde\x1e\x2f\x8e\xb6" +
	"\xd1\x96\xce\xca\xb1\x41\x2b\x61\xb6\x14\xa4\xd4\x6c\x30\x96\xd0\x3e\x80\xb2\x08\xe3\x06\x64\xaa\xa1\xeb\x15\x8f" +
	"\x48\xd7\x23\xab\x4f\xb1\xf4\x11\x87\xe5\x6b\xb0\x43\x71\xc1\x73\x20\x68\x42\x2d\x57\x12\x07\x5c\x07\xe2\xad\xb2" +
	"\x2e\x8b\x6b\x1d\xba\xa5\xf7\x37\x6a\xa6\x98\x87\x26\xd7\x19\xe8\x05\x0a\xb9\x36\xf6\x33\xb2\x31\x48\xf4\x87\x4a" +
	"\x53\xd0\xee\xc4\xac\xe4\xcd\xc8\x74\xb9\x35\x31\x99\x40\xf3\xd4\x2e\x6b\x62\xc7\xd6\x34\x99\x15\x67\x91\xa6\xdb" +
	"\x74\xeb\x2b\xa1\xec\x42\x93\x57\x4d\xe8\xef\xda\xd0\x59\x94\x9e\x8e\xc9\xe0\xf2\x5a\x7c\xbd\x0a\x47\xd9\x51\xdd" +
	"\xd2\x66\x43\x91\xab\xe1\xd3\xb3\xb0\xf9\x8d\xea\x5c\xdb\x64\x3a\xbc\x61\x27\x59\xe7\xed\x36\xd4\xf5\xc8\x12\xf4" +
	"\xbf\x67\x90\x56\xa1\x21\x75\xb7\xde\x72\xeb\xd5\xc2\x6e\x2c\x6e\xef\x1a\x43\x08\xf4\xa3\xbe\xa4\x27\x66\x96\x84" +
	"\xe9\xf4\xe8\xf1\xe6\xfa\xe2\x4e\xf4\xd5\x62\x98\xdc\xdb\x68\xd0\xfb\x22\x59\x9f\x9b\xdb\xe0\x3f\x65\xf1\xd6\xa4" +
	"\x3a\xf9\xf3\xa0\xfa\xcf\x94\x0e\xf6\x6b\x8d\x97\xec\xe0\xfe\xfe\xeb\xf5\x74\x74\x98\xd7\x7f\xbf\xd0\xed\x79\x68" +
	"\x4f\xa3\x61\x78\xc6\x9e\x82\x93\x73\xe8\xdb\x33\x39\x78\x32\x3d\xb3\x13\xa5\x7f\xcd\xe9\xef\xc6\x9e\xcd\xda\x6e" +
	"\x64\x48\x2f\xe4\x17\xd3\x73\x71\xae\x1e\x78\xfc\xc4\x82\xf6\xdd\x59\x36\x39\x1c\x26\x97\xb5\xbb\x6f\xc1\x37\x33" +
	"\x7c\x9c\x42\xff\x2c\x8f\x79\xed\xe5\x9d\x61\xe7\x5d\x32\x34\x4d\x0b\x1c\xaf\x72\xe8\x91\x65\x7b\xf7\xc8\xf2\x57" +
	"\xd9\xff\x03\x00\x00\xff\xff\xa0\xfe\x71\x7a\xa6\x0d\x00\x00")

func bindataFrontendIndexhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataFrontendIndexhtml,
		"frontend/index.html",
	)
}



func bindataFrontendIndexhtml() (*asset, error) {
	bytes, err := bindataFrontendIndexhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "frontend/index.html",
		size: 3494,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"frontend/app.js":     bindataFrontendAppjs,
	"frontend/index.html": bindataFrontendIndexhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"frontend": {Func: nil, Children: map[string]*bintree{
		"app.js": {Func: bindataFrontendAppjs, Children: map[string]*bintree{}},
		"index.html": {Func: bindataFrontendIndexhtml, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
